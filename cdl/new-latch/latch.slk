//CountDownLatch
data CDL{
}.

data cell{
  int v;
}.

pred_prim LatchIn{-%P@Split}<>.

pred_prim LatchOut{+%P@Split}<>.

pred_prim CNT<n:int>
  inv n>=(-1).

lemma "split" self::CNT<n> & a>=0 & b>=0 & n=a+b -> self::CNT<a> * self::CNT<b>.

lemma "combine" self::CNT<a> * self::CNT<b> & a<=0 & b<=0 -> self::CNT<a+b>.

lemma "normalize" self::LatchOut{+%P}<> * self::CNT<n> & n<0 -> %P.

lemma "error" self::CNT<a> * self::CNT<b> & a>0 & b<0 ->  emp & flow __Fail.

//1: VALID
checkentail c::CNT<2> |- c::CNT<2> * c::CNT<0>.
print residue.

//2: VALID
checkentail c::CNT<2> |- c::CNT<1> * c::CNT<1>.
print residue.

//3: VALID -- ???
checkentail c::CNT<a> * c::CNT<b> & a=-1 & b=-2 |- c::CNT<n> & n=-3.
print residue.

//4: VALID
checkentail c::CNT<1> |- (exists n: c::CNT<n> & n>0).
print residue.
// 2 residues: 1 match only, 1 split
// Potential overhead due to splitting (due to CNT<0>)
// need a good way to control splitting

//5: VALID
checkentail c::LatchOut{+z::cell<10>}<> * c::CNT<(-1)> |- z::cell<10>.
print residue.

//6: FAIL, since c::CNT<0> is resource-ambiguous -- Reason seems incorrect
checkentail c::LatchOut{+z::cell<10>}<> * c::CNT<0> |- z::cell<10>.
print residue.

//7: FAIL -- should be VALID -- VALID
checkentail c::CNT<1> * c::CNT<(-1)> |- emp & flow __Fail.
print residue.

//8: VALID -- should FAIL -- FAIL
checkentail c::CNT<1> * c::CNT<(-1)> |- true.
print residue.
